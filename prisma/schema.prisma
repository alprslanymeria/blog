generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ABONELİK SİSTEMİ
model Subscriber {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  status    String    @default("ACTIVE")
  createdAt DateTime  @default(now())

  @@map("Subscribers")
}

// BLOG POST
model BlogPost {
  id        Int     @id @default(autoincrement())
  imageUrl  String  @db.VarChar(500)
  header    String  @db.VarChar(255)
  summary   String  @db.Text
  content   String  @db.Text
  author    String  @db.VarChar(255)
  createdAt DateTime @default(now())
  categoryId Int
  category  Category @relation(fields: [categoryId], references: [id])
  tags      BlogPostTag[]
  comments  Comment[]
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  blogPosts   BlogPost[]
}

model Tag {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  posts BlogPostTag[]
}

model BlogPostTag {
  blogPostId Int
  tagId      Int
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([blogPostId, tagId])
}

// CAPS RESİMLERİ
model CapsImage {
  id          Int       @id @default(autoincrement())
  imageUrl    String    @db.VarChar(500)
  createdAt   DateTime  @default(now())

  @@map("CapsImages")
}


// PROJE SİSTEMİ
model Project {
  id          Int            @id @default(autoincrement())
  name        String
  summary     String         @db.Text
  content     String         @db.Text
  images      ProjectImage[]
  technologies ProjectTechnology[]
  links       ProjectLink[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProjectImage {
  id        Int      @id @default(autoincrement())
  projectId Int
  url       String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Technology {
  id         Int                @id @default(autoincrement())
  name       String
  icon       String
  projects   ProjectTechnology[]
}

model ProjectTechnology {
  id          Int       @id @default(autoincrement())
  projectId   Int
  technologyId Int
  project     Project   @relation(fields: [projectId], references: [id])
  technology  Technology @relation(fields: [technologyId], references: [id])
}

model ProjectLink {
  id        Int      @id @default(autoincrement())
  projectId Int
  name      String
  url       String
  project   Project  @relation(fields: [projectId], references: [id])
}


// YORUM ALANI
model User {
  cookieId    String   @id @unique @db.VarChar(255)
  createdOn   DateTime @default(now()) @map("CreatedOnUtc")
  
  comments    Comment[]
}

model Comment {
  commentId       Int       @id @default(autoincrement())
  parentCommentId Int?      @db.Int
  content         String    @db.Text
  avatar          String?   @db.VarChar(255)
  cookieId        String    @db.VarChar(255)
  createdOn       DateTime  @default(now()) @map("CreatedOnUtc")
  updatedOn       DateTime? @map("UpdatedOnUtc")
  isDeleted       Boolean   @default(false)
  blogId          Int       // Blog ile ilişki
  blog            BlogPost  @relation(fields: [blogId], references: [id]) // BlogPost ile ilişki

  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [commentId], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[] @relation("CommentReplies")
  user            User      @relation(fields: [cookieId], references: [cookieId])

  @@index([parentCommentId])
  @@index([blogId])
}